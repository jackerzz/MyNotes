#from : https://www.cnblogs.com/ctztake/p/9932002.html
$ ps -ef|grep nginx 
	# nginx会自动根据当前主机的CPU的内核数目创建对应的进程数量(当前ubuntu主机是2核4线程配置)
$ nginx
	#启动
$ nginx -s stop 
or
$ nginx -s quit


nginx 配置：

		ain                                # 全局配置

		events {                            # nginx工作模式配置

		}

		http {                                # http设置
		    ....

		    server {                        # 服务器主机配置
		        ....
		        location {                    # 路由配置
		            ....
		        }

		        location path {
		            ....
		        }

		        location otherpath {
		            ....
		        }
		    }

		    server {
		        ....

		        location {
		            ....
		        }
		    }

		    upstream name {                    # 负载均衡配置
		        ....
		    }
		}


基础配置

日志配置

ssl证书加密

压缩配置

文件缓存配置


nginx 配置文件组成：
	main：用于进行nginx全局信息的配置
		#----------------------------------------------------------------------------------------------------
		# user nobody nobody;
		worker_processes 2;
		# error_log logs logs/error_log
		# error_log logs logs/error_log notice
		# error_log logs logs/error_log info
		# error_log logs logs/nginx.pid

		worker_rlimit_nofile 1024

		user用来指定nginx worker进程运行用户以及用户组，默认nobody账号运行
		worker_processes指定nginx要开启的子进程数量，运行过程中监控每个进程消耗内存(一般几M~几十M不等)根据实际情况进行调整，通常数量是CPU内核数量的整数倍
		error_log定义错误日志文件的位置及输出级别【debug / info / notice / warn / error / crit】
		pid用来指定进程id的存储文件的位置
		worker_rlimit_nofile用于指定一个进程可以打开最多文件数量的描述

		#----------------------------------------------------------------------------------------------------

	events：用于nginx工作模式的配置
		----------------------------------------------------------------------------------------------------
		----------------------------------------------------------------------------------------------------

	http：用于进行http协议信息的一些配置
		----------------------------------------------------------------------------------------------------
		----------------------------------------------------------------------------------------------------

	server：用于进行服务器访问信息的配置
		----------------------------------------------------------------------------------------------------
		----------------------------------------------------------------------------------------------------

	location：用于进行访问路由的配置
		----------------------------------------------------------------------------------------------------
		----------------------------------------------------------------------------------------------------

	upstream：用于进行负载均衡的配置
		----------------------------------------------------------------------------------------------------
		----------------------------------------------------------------------------------------------------





